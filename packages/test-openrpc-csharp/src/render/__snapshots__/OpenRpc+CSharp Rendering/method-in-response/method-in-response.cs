using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace generated.openrpc
{
    /// <remarks>Generated by Omnigen @ 2000-01-02T03:04:05.000Z</remarks>
    public abstract class AbstractRequestData
    {
        [JsonProperty("Password", Required = Required.Always)]
        [Required]
        public string Password { get; }
        [JsonProperty("Username", Required = Required.Always)]
        [Required]
        public string Username { get; }

        public AbstractRequestData(string username, string password)
        {
            this.Username = username;
            this.Password = password;
        }
    }

    public abstract class AbstractResponseResult<TData>
    {
        [JsonProperty("data", Required = Required.Always)]
        [Required]
        public TData Data { get; }
        public abstract string Method { get; }
        [JsonProperty("signature", Required = Required.Always)]
        [Required]
        public string Signature { get; }
        [JsonProperty("uuid", Required = Required.Always)]
        [Required]
        public string Uuid { get; }

        public AbstractResponseResult(string signature, string uuid, TData data)
        {
            this.Signature = signature;
            this.Uuid = uuid;
            this.Data = data;
        }
    }

    public class DepositRequestData : AbstractRequestData
    {
        [JsonExtensionData]
        public JToken AdditionalProperties { get; }
        [JsonProperty("NotificationURL", Required = Required.Always)]
        [Required]
        public string NotificationURL { get; }

        public DepositRequestData(string username, string password, string notificationUrl, JToken additionalProperties) : base(username, password)
        {
            this.NotificationURL = notificationUrl;
            this.AdditionalProperties = additionalProperties;
        }
    }

    public class DepositResponseData
    {
        [JsonProperty("orderid")]
        public string Orderid { get; }
        [JsonProperty("url")]
        public string Url { get; }

        public DepositResponseData(string orderid, string url)
        {
            this.Orderid = orderid;
            this.Url = url;
        }
    }

    public class RefundRequestData : AbstractRequestData
    {
        [JsonExtensionData]
        public JToken AdditionalProperties { get; }
        [JsonProperty("Amount", Required = Required.Always)]
        [Required]
        public string Amount { get; }
        [JsonProperty("OrderID", Required = Required.Always)]
        [Required]
        public string OrderID { get; }

        public RefundRequestData(string username, string password, string orderId, string amount, JToken additionalProperties) : base(username, password)
        {
            this.OrderID = orderId;
            this.Amount = amount;
            this.AdditionalProperties = additionalProperties;
        }
    }

    public class RefundResponseData
    {
        [JsonProperty("orderid")]
        public string Orderid { get; }
        [JsonProperty("result", Required = Required.Always)]
        [Required]
        public string Result { get; }

        public RefundResponseData(string orderid, string result)
        {
            this.Orderid = orderid;
            this.Result = result;
        }
    }

    public class DepositRequest : JsonRpcRequest<DepositRequestData, DepositRequestParams>
    {
        [JsonProperty("method")]
        [Required]
        public string Method { get; } = "Deposit";

        public DepositRequest(string id, DepositRequestParams @params) : base(id, @params) { }
    }

    public class DepositRequestParams : JsonRpcRequestParams<DepositRequestData>
    {
        public DepositRequestParams(string uuid, DepositRequestData data) : base(uuid, data) { }
    }

    public class DepositResponse : JsonRpcResponse<DepositResponseData, DepositResponseResult>
    {
        public DepositResponse(string id, DepositResponseResult result) : base(id, result) { }
    }

    public class DepositResponseResult : AbstractResponseResult<DepositResponseData>
    {
        [JsonProperty("method")]
        [Required]
        public string Method { get; } = "Deposit";

        public DepositResponseResult(string signature, string uuid, DepositResponseData data) : base(signature, uuid, data) { }
    }

    /// <summary>
    /// Generic class to describe the JsonRpc error response package
    /// </summary>
    public class JsonRpcErrorResponse
    {
        [JsonProperty("error", Required = Required.Always)]
        [Required]
        public ErrorUnknownError Error { get; }
        [JsonProperty("id")]
        public string Id { get; }
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; } = "2.0";

        public JsonRpcErrorResponse(ErrorUnknownError error, string id)
        {
            this.Error = error;
            this.Id = id;
        }
    }

    public class ErrorUnknown : JsonRpcErrorResponse
    {
        public ErrorUnknown(ErrorUnknownError error, string id) : base(error, id) { }
    }

    public class RefundRequest : JsonRpcRequest<RefundRequestData, RefundRequestParams>
    {
        [JsonProperty("method")]
        [Required]
        public string Method { get; } = "Refund";

        public RefundRequest(string id, RefundRequestParams @params) : base(id, @params) { }
    }

    public class RefundRequestParams : JsonRpcRequestParams<RefundRequestData>
    {
        public RefundRequestParams(string uuid, RefundRequestData data) : base(uuid, data) { }
    }

    public class RefundResponse : JsonRpcResponse<RefundResponseData, RefundResponseResult>
    {
        public RefundResponse(string id, RefundResponseResult result) : base(id, result) { }
    }

    public class RefundResponseResult : AbstractResponseResult<RefundResponseData>
    {
        [JsonProperty("method")]
        [Required]
        public string Method { get; } = "Refund";

        public RefundResponseResult(string signature, string uuid, RefundResponseData data) : base(signature, uuid, data) { }
    }

    /// <summary>
    /// Generic class to describe the JsonRpc request package
    /// </summary>
    public abstract class JsonRpcRequest<T0, TParams>
      where T0 : AbstractRequestData
      where TParams : JsonRpcRequestParams<T0>
    {
        [JsonProperty("id")]
        public string Id { get; }
        [JsonProperty("jsonrpc")]
        [Required]
        public string Jsonrpc { get; } = "2.0";
        public abstract string Method { get; }
        [JsonProperty("params")]
        public TParams Params { get; }

        public JsonRpcRequest(string id, TParams @params)
        {
            this.Id = id;
            this.Params = @params;
        }
    }

    /// <summary>
    /// Generic class to describe the JsonRpc response package
    /// </summary>
    public class JsonRpcResponse<T0, T>
      where T : AbstractResponseResult<T0>
    {
        [JsonProperty("id")]
        public string Id { get; }
        [JsonProperty("jsonrpc")]
        public string Jsonrpc { get; } = "2.0";
        [JsonProperty("result")]
        public T Result { get; }

        public JsonRpcResponse(string id, T result)
        {
            this.Id = id;
            this.Result = result;
        }
    }

    /// <summary>
    /// Generic class to describe the JsonRpc error inside an error response
    /// </summary>
    public class JsonRpcError
    {
        [JsonProperty("code")]
        public int Code { get; }
        [JsonProperty("data")]
        public dynamic Data { get; }
        [JsonProperty("message")]
        public string Message { get; }

        public JsonRpcError(int? code, string message, dynamic data)
        {
            this.Code = code ?? -1;
            this.Message = message ?? "Unknown Error";
            this.Data = data;
        }
    }

    public class ErrorUnknownError : JsonRpcError
    {
        public ErrorUnknownError(int? code, string message, dynamic data) : base(code ?? -1, message ?? "Unknown Error", data) { }
    }

    /// <summary>
    /// Generic class to describe the JsonRpc request params
    /// </summary>
    public class JsonRpcRequestParams<T>
      where T : AbstractRequestData
    {
        [JsonProperty("Data", Required = Required.Always)]
        [Required]
        public T Data { get; }
        [JsonProperty("UUID", Required = Required.Always)]
        [Required]
        public string UUID { get; }

        public JsonRpcRequestParams(string uuid, T data)
        {
            this.UUID = uuid;
            this.Data = data;
        }
    }
}
