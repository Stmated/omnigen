using Newtonsoft.Json;

namespace generated.omnigen
{
  /// <remarks>Generated by Omnigen @ 2000-01-02T03:04:05.000Z</remarks>
  public class Method1Request : JsonRpcRequest<In1, Method1RequestParams>
  {
    public Method1Request(string id, Method1RequestParams @params) : base(id, @params, "Method1") { }
  }
  public class Method1RequestParams : JsonRpcRequestParams<In1>
  {
    public Method1RequestParams(In1 @in) : base(@in) { }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc response package
  /// </summary>
  public class JsonRpcResponse
  {
    [JsonProperty("id")]
    public string Id { get; }
    [JsonProperty("jsonrpc")]
    public string Jsonrpc { get; } = "2.0";
    [JsonProperty("result")]
    public Out Result { get; }

    public JsonRpcResponse(string id, Out result)
    {
      this.Id = id;
      this.Result = result;
    }
  }
  public class Method1Response : JsonRpcResponse
  {
    public Method1Response(string id, Out result) : base(id, result) { }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc error response package
  /// </summary>
  public class JsonRpcErrorResponse
  {
    [JsonProperty("error", Required = Required.Always)]
    public ErrorUnknownError Error { get; }
    [JsonProperty("id")]
    public string Id { get; }
    [JsonProperty("jsonrpc")]
    public string Jsonrpc { get; } = "2.0";

    public JsonRpcErrorResponse(ErrorUnknownError error, string id)
    {
      this.Error = error;
      this.Id = id;
    }
  }
  public class ErrorUnknown : JsonRpcErrorResponse
  {
    public ErrorUnknown(ErrorUnknownError error, string id) : base(error, id) { }
  }
  public class Method2Request : JsonRpcRequest<In2, Method2RequestParams>
  {
    public Method2Request(string id, Method2RequestParams @params) : base(id, @params, "Method2") { }
  }
  public class Method2RequestParams : JsonRpcRequestParams<In2>
  {
    public Method2RequestParams(In2 @in) : base(@in) { }
  }
  public class Method2Response : JsonRpcResponse
  {
    public Method2Response(string id, Out result) : base(id, result) { }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc request package
  /// </summary>
  public class JsonRpcRequest<T0, TParams>
    where TParams : JsonRpcRequestParams<T0>
  {
    [JsonProperty("params")]
    public TParams @params { get; }
    [JsonProperty("id", Required = Required.Always)]
    public string Id { get; }
    [JsonProperty("jsonrpc")]
    public string Jsonrpc { get; } = "2.0";
    [JsonProperty("method", Required = Required.Always)]
    public string Method { get; }

    public JsonRpcRequest(string id, TParams @params, string method)
    {
      this.Id = id;
      this.@params = @params;
      this.Method = method;
    }
  }
  public class Out
  {
    [JsonProperty("success")]
    public bool Success { get; }

    public Out(bool success)
    {
      this.Success = success;
    }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc error inside an error response
  /// </summary>
  public class JsonRpcError
  {
    [JsonProperty("code")]
    public int? Code { get; }
    [JsonProperty("data")]
    public dynamic Data { get; }
    [JsonProperty("message")]
    public string Message { get; }

    public JsonRpcError(int? code, string message, dynamic data)
    {
      this.Code = code ?? -1;
      this.Message = message ?? "Unknown Error";
      this.Data = data;
    }
  }
  public class ErrorUnknownError : JsonRpcError
  {
    public ErrorUnknownError(int? code, string message, dynamic data) : base(code ?? -1, message ?? "Unknown Error", ((object) data)) { }
  }
  public class In1
  {
    [JsonProperty("data")]
    public Object1 Data { get; }

    public In1(Object1 data)
    {
      this.Data = data;
    }
  }
  public class Object1 : Base<string>
  {
    [JsonProperty("a")]
    public string A { get; }

    public Object1(string description, string common, string x, string a) : base(description, common, "1", x)
    {
      this.A = a;
    }
  }
  public class In2
  {
    [JsonProperty("data")]
    public Object2 Data { get; }

    public In2(Object2 data)
    {
      this.Data = data;
    }
  }
  public class Object2 : Base<double>
  {
    [JsonProperty("b")]
    public string B { get; }

    public Object2(string description, string common, double x, string b) : base(description, common, "2", x)
    {
      this.B = b;
    }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc request params
  /// </summary>
  public class JsonRpcRequestParams<T>
  {
    [JsonProperty("in")]
    public T @in { get; }

    public JsonRpcRequestParams(T @in)
    {
      this.@in = @in;
    }
  }
  public class Base<TX>
  {
    [JsonProperty("common")]
    public string Common { get; }
    [JsonProperty("description")]
    public string Description { get; }
    [JsonProperty("kind")]
    public string Kind { get; }
    [JsonProperty("x")]
    public TX X { get; }

    public Base(string description, string common, string kind, TX x)
    {
      this.Description = description;
      this.Common = common;
      this.Kind = kind;
      this.X = x;
    }
  }
}
