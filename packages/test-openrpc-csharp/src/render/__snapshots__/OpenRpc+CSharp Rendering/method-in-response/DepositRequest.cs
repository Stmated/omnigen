using Newtonsoft.Json;

namespace generated.openrpc
{
  /// <remarks>Generated by Omnigen @ 2000-01-02T03:04:05.000Z</remarks>
  public class DepositRequest : JsonRpcRequest<DepositRequestData, DepositRequestParams>
  {
    public DepositRequest(string id, DepositRequestParams @params) : base(id, @params, "Deposit") { }
  }
  public class DepositRequestParams : JsonRpcRequestParams<DepositRequestData>
  {
    public DepositRequestParams(string uuid, DepositRequestData data) : base(uuid, data) { }
  }
  public class DepositResponse : JsonRpcResponse<DepositResponseData, DepositResponseResult>
  {
    public DepositResponse(string id, DepositResponseResult result) : base(id, result) { }
  }
  public class DepositResponseResult : AbstractResponseResult<DepositResponseData>
  {
    public DepositResponseResult(string signature, string uuid, DepositResponseData data) : base(signature, uuid, data, "Deposit") { }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc error response package
  /// </summary>
  public class JsonRpcErrorResponse
  {
    [JsonProperty("error", Required = Required.Always)]
    public ErrorUnknownError Error { get; }
    [JsonProperty("id")]
    public string Id { get; }
    [JsonProperty("jsonrpc")]
    public string Jsonrpc { get; } = "2.0";

    public JsonRpcErrorResponse(ErrorUnknownError error, string id)
    {
      this.Error = error;
      this.Id = id;
    }
  }
  public class ErrorUnknown : JsonRpcErrorResponse
  {
    public ErrorUnknown(ErrorUnknownError error, string id) : base(error, id) { }
  }
  public class RefundRequest : JsonRpcRequest<RefundRequestData, RefundRequestParams>
  {
    public RefundRequest(string id, RefundRequestParams @params) : base(id, @params, "Refund") { }
  }
  public class RefundRequestParams : JsonRpcRequestParams<RefundRequestData>
  {
    public RefundRequestParams(string uuid, RefundRequestData data) : base(uuid, data) { }
  }
  public class RefundResponse : JsonRpcResponse<RefundResponseData, RefundResponseResult>
  {
    public RefundResponse(string id, RefundResponseResult result) : base(id, result) { }
  }
  public class RefundResponseResult : AbstractResponseResult<RefundResponseData>
  {
    public RefundResponseResult(string signature, string uuid, RefundResponseData data) : base(signature, uuid, data, "Refund") { }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc request package
  /// </summary>
  public class JsonRpcRequest<T0, TParams>
    where T0 : AbstractRequestData
    where TParams : JsonRpcRequestParams<T0>
  {
    [JsonProperty("params")]
    public TParams @params { get; }
    [JsonProperty("id", Required = Required.Always)]
    public string Id { get; }
    [JsonProperty("jsonrpc")]
    public string Jsonrpc { get; } = "2.0";
    [JsonProperty("method", Required = Required.Always)]
    public string Method { get; }

    public JsonRpcRequest(string id, TParams @params, string method)
    {
      this.Id = id;
      this.@params = @params;
      this.Method = method;
    }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc response package
  /// </summary>
  public class JsonRpcResponse<T0, T>
    where T : AbstractResponseResult<T0>
  {
    [JsonProperty("id")]
    public string Id { get; }
    [JsonProperty("jsonrpc")]
    public string Jsonrpc { get; } = "2.0";
    [JsonProperty("result")]
    public T Result { get; }

    public JsonRpcResponse(string id, T result)
    {
      this.Id = id;
      this.Result = result;
    }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc error inside an error response
  /// </summary>
  public class JsonRpcError
  {
    [JsonProperty("code")]
    public int? Code { get; }
    [JsonProperty("data")]
    public dynamic Data { get; }
    [JsonProperty("message")]
    public string Message { get; }

    public JsonRpcError(int? code, string message, dynamic data)
    {
      this.Code = code ?? -1;
      this.Message = message ?? "Unknown Error";
      this.Data = data;
    }
  }
  public class ErrorUnknownError : JsonRpcError
  {
    public ErrorUnknownError(int? code, string message, dynamic data) : base(code ?? -1, message ?? "Unknown Error", ((object) data)) { }
  }
  public abstract class AbstractRequestData
  {
    [JsonProperty("Password", Required = Required.Always)]
    public string Password { get; }
    [JsonProperty("Username", Required = Required.Always)]
    public string Username { get; }

    public AbstractRequestData(string username, string password)
    {
      this.Username = username;
      this.Password = password;
    }
  }
  public class DepositRequestData : AbstractRequestData
  {
    public dynamic AdditionalProperties { get; }
    [JsonProperty("NotificationURL", Required = Required.Always)]
    public string NotificationUrl { get; }

    public DepositRequestData(string username, string password, string notificationUrl, dynamic additionalProperties) : base(username, password)
    {
      this.NotificationUrl = notificationUrl;
      this.AdditionalProperties = additionalProperties;
    }
  }
  public class DepositResponseData
  {
    [JsonProperty("orderid")]
    public string Orderid { get; }
    [JsonProperty("url")]
    public string Url { get; }

    public DepositResponseData(string orderid, string url)
    {
      this.Orderid = orderid;
      this.Url = url;
    }
  }
  public class RefundRequestData : AbstractRequestData
  {
    public dynamic AdditionalProperties { get; }
    [JsonProperty("Amount", Required = Required.Always)]
    public string Amount { get; }
    [JsonProperty("OrderID", Required = Required.Always)]
    public string OrderId { get; }

    public RefundRequestData(string username, string password, string orderId, string amount, dynamic additionalProperties) : base(username, password)
    {
      this.OrderId = orderId;
      this.Amount = amount;
      this.AdditionalProperties = additionalProperties;
    }
  }
  public class RefundResponseData
  {
    [JsonProperty("orderid")]
    public string Orderid { get; }
    [JsonProperty("result", Required = Required.Always)]
    public string Result { get; }

    public RefundResponseData(string orderid, string result)
    {
      this.Orderid = orderid;
      this.Result = result;
    }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc request params
  /// </summary>
  public class JsonRpcRequestParams<T>
    where T : AbstractRequestData
  {
    [JsonProperty("Data", Required = Required.Always)]
    public T Data { get; }
    [JsonProperty("UUID", Required = Required.Always)]
    public string Uuid { get; }

    public JsonRpcRequestParams(string uuid, T data)
    {
      this.Uuid = uuid;
      this.Data = data;
    }
  }
  public class AbstractResponseResult<TData>
  {
    [JsonProperty("data", Required = Required.Always)]
    public TData Data { get; }
    [JsonProperty("method", Required = Required.Always)]
    public string Method { get; }
    [JsonProperty("signature", Required = Required.Always)]
    public string Signature { get; }
    [JsonProperty("uuid", Required = Required.Always)]
    public string Uuid { get; }

    public AbstractResponseResult(string signature, string uuid, TData data, string method)
    {
      this.Signature = signature;
      this.Uuid = uuid;
      this.Data = data;
      this.Method = method;
    }
  }
}
