using Newtonsoft.Json.JsonPropertyAttribute;
using Newtonsoft.Json.Required;

namespace generated.omnigen
{
  /// <summary>
  /// Generic class to describe the JsonRpc request package
  /// </summary>
  /// <remarks>Generated by Omnigen @ 2000-01-02T03:04:05.000Z</remarks>
  public class JsonRpcRequest
  {
    [JsonProperty("params")]
    public ListThingsRequestParams @params { get; }
    [JsonProperty("id", Required = Required.Always)]
    public string Id { get; }
    [JsonProperty("jsonrpc")]
    public string Jsonrpc { get; } = "2.0";
    [JsonProperty("method")]
    public string Method { get; } = "list_things";

    public JsonRpcRequest(ListThingsRequestParams @params, string id)
    {
      this.@params = @params;
      this.Id = id;
    }
  }
  /// <summary>
  /// List all things
  /// </summary>
  public class ListThingsRequest : JsonRpcRequest
  {
    public ListThingsRequest(ListThingsRequestParams @params, string id) : base(@params, id)
    {

    }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc response package
  /// </summary>
  public class JsonRpcResponse
  {
    [JsonProperty("id")]
    public string Id { get; }
    [JsonProperty("jsonrpc")]
    public string Jsonrpc { get; } = "2.0";
    [JsonProperty("result")]
    public Thing[] Result { get; }

    public JsonRpcResponse(string id, Thing[] result)
    {
      this.Id = id;
      this.Result = result;
    }
  }
  /// <summary>
  /// List all things
  /// </summary>
  /// <p>As response: An array of things</p>
  public class ListThingsResponse : JsonRpcResponse
  {
    public ListThingsResponse(string id, Thing[] result) : base(id, result)
    {

    }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc error response package
  /// </summary>
  public class JsonRpcErrorResponse
  {
    [JsonProperty("error", Required = Required.Always)]
    public ErrorUnknownError Error { get; }
    [JsonProperty("id")]
    public string Id { get; }
    [JsonProperty("jsonrpc")]
    public string Jsonrpc { get; } = "2.0";

    public JsonRpcErrorResponse(ErrorUnknownError error, string id)
    {
      this.Error = error;
      this.Id = id;
    }
  }
  public class ErrorUnknown : JsonRpcErrorResponse
  {
    public ErrorUnknown(ErrorUnknownError error, string id) : base(error, id)
    {

    }
  }
  /// <summary>
  /// Generic class to describe the JsonRpc request params
  /// </summary>
  public class JsonRpcRequestParams
  {

  }
  public class ListThingsRequestParams : JsonRpcRequestParams
  {

  }
  /// <summary>
  /// Generic class to describe the JsonRpc error inside an error response
  /// </summary>
  public class JsonRpcError
  {
    [JsonProperty("code")]
    public int? Code { get; }
    [JsonProperty("data")]
    public dynamic Data { get; }
    [JsonProperty("message")]
    public string Message { get; }

    public JsonRpcError(int? code, string message, dynamic data)
    {
      this.Code = ((code == null) ? -1 : code);
      this.Message = ((message == null) ? "Unknown Error" : message);
      this.Data = data;
    }
  }
  public class ErrorUnknownError : JsonRpcError
  {
    public ErrorUnknownError(int? code, string message, dynamic data) : base(((code == null) ? -1 : code), ((message == null) ? "Unknown Error" : message), ((object) data))
    {

    }
  }
  public class Thing
  {
    public dynamic AdditionalProperties { get; }
    [JsonProperty("id", Required = Required.Always)]
    public string Id { get; }

    public Thing(string id, dynamic additionalProperties)
    {
      this.Id = id;
      this.AdditionalProperties = additionalProperties;
    }
  }
}
